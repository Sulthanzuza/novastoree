<link rel="stylesheet" href="/proddet.css">
<title>{{title}}</title>

{{>header}}

<div class="text-center" style="padding-top:5%">
  <h3>All Products</h3>
</div>
<div class="search-container text-center" style="margin-top: 2%;">
  <input 
    type="text" 
    id="search-input" 
    placeholder="Search for products..." 
    style="padding: 10px; width: 40%; border: 1px solid #ccc; border-radius: 5px;">
  
  <select 
    id="category-filter" 
    style="padding: 10px; border: 1px solid #ccc; border-radius: 5px;">
    <option value="">All Categories</option>
    {{#each categories}}
      <option value="{{this.name}}">{{this.name}}</option>
    {{/each}}
  </select>
  
  <button 
    id="search-button" 
    style="padding: 10px 20px; background-color: #000; color: #fff; border: none; border-radius: 5px;">
    Search
  </button>
  <div class="btn-group">
    <button type="button" class="btn btn-danger dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
      Sort By
    </button>
    <ul class="dropdown-menu">
      <li><a class="dropdown-item" href="/list-products?sort=popularity">Popularity</a></li>
      <li><a class="dropdown-item" href="/list-products?sort=priceLowToHigh">Price: low to high</a></li>
      <li><a class="dropdown-item" href="/list-products?sort=priceHighToLow">Price: high to low</a></li>
      <li><a class="dropdown-item" href="/list-products?sort=averageRatings">Average ratings</a></li>
      <li><a class="dropdown-item" href="/list-products?sort=featured">Featured</a></li>
      <li><a class="dropdown-item" href="/list-products?sort=newArrivals">New arrivals</a></li>
      <li><a class="dropdown-item" href="/list-products?sort=aToZ">aA - zZ</a></li>
      <li><a class="dropdown-item" href="/list-products?sort=zToA">zZ - aA</a></li>
    </ul>
  </div>
</div>

<div class="sortdiv" style="margin-left:47%; margin-top:3%">
  
</div>
<div class="filter-summary container" style="margin-top: 30px; margin-bottom: 15px; padding: 10px 15px; background-color: #f8f9fa; border-radius: 5px; display: none;">
  <div class="row align-items-center">
    <div class="col-md-8">
      <span id="results-count" class="fw-bold"></span>
      <span id="search-summary"></span>
      <span id="category-summary"></span>
    </div>
    <div class="col-md-4 text-end">
      <span id="sort-summary" class="text-muted"></span>
    </div>
  </div>
</div>

<section class="best-sellers-section" style="margin-top:0">
  <div class="prods">
    
<div class="row products-grid" id="products-container">

</div>

  </div>
</section>

<nav aria-label="Page navigation" class="d-flex justify-content-end mt-4">
  <ul class="pagination" id="pagination-controls">
    <li class="page-item" id="prev-btn">
      <a class="page-link" href="#" aria-label="Previous">
        <span aria-hidden="true">&laquo;</span>
      </a>
    </li>

    <li class="page-item" id="next-btn">
      <a class="page-link" href="#" aria-label="Next">
        <span aria-hidden="true">&raquo;</span>
      </a>
    </li>
  </ul>
</nav>

{{>footer}}
<script id="products-data" type="application/json">
  {{{allProducts}}}
</script>

<script>
  const wishlistProductIds = JSON.parse('{{{wishlistProductIds}}}'); 
</script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const products = document.querySelectorAll(".product-item");
    const productsPerPage = 20;
    const totalPages = Math.ceil(products.length / productsPerPage);
    let currentPage = 1;


    function showPage(page) {
      const startIndex = (page - 1) * productsPerPage;
      const endIndex = startIndex + productsPerPage;

      products.forEach((product, index) => {
        if (index >= startIndex && index < endIndex) {
          product.style.display = "block";
        } else {
          product.style.display = "none";
        }
      });


      document.getElementById("prev-btn").style.display = page === 1 ? "none" : "block";
      document.getElementById("next-btn").style.display = page === totalPages ? "none" : "block";


      updatePageNumbers(page);
    }


    function updatePageNumbers(currentPage) {
      const paginationControls = document.getElementById("pagination-controls");

      const pageItems = document.querySelectorAll(".page-number");
      pageItems.forEach(item => item.remove());


      for (let i = 1; i <= totalPages; i++) {
        const pageItem = document.createElement("li");
        pageItem.classList.add("page-item");
        pageItem.classList.add("page-number");

        const pageLink = document.createElement("a");
        pageLink.classList.add("page-link");
        pageLink.href = "#";
        pageLink.textContent = i;

        if (i === currentPage) {
          pageLink.classList.add("active");
        }

        pageLink.addEventListener("click", function (e) {
          e.preventDefault();
          currentPage = i;
          showPage(currentPage);
        });

        pageItem.appendChild(pageLink);
        paginationControls.insertBefore(pageItem, document.getElementById("next-btn"));
      }
    }

    document.getElementById("prev-btn").addEventListener("click", function (e) {
      e.preventDefault();
      if (currentPage > 1) {
        currentPage--;
        showPage(currentPage);
      }
    });

    document.getElementById("next-btn").addEventListener("click", function (e) {
      e.preventDefault();
      if (currentPage < totalPages) {
        currentPage++;
        showPage(currentPage);
      }
    });


    showPage(currentPage);
  });
</script>


<script>
  document.addEventListener("DOMContentLoaded", () => {
  const products = JSON.parse(document.getElementById('products-data').textContent);
  let filteredProducts = [...products];
  let currentSort = 'newArrivals';
  let currentPage = 1;
  const productsPerPage = 20;


  renderProducts();
  setupEventListeners();

function renderProducts() {
    const container = document.getElementById('products-container');
    const paginatedProducts = filteredProducts.slice(
        (currentPage - 1) * productsPerPage,
        currentPage * productsPerPage
    );
     if (paginatedProducts.length === 0) {
        container.innerHTML = `<div class="text-center mt-4">
            <h4>No products found</h4>
        </div>`;
    } else {

    container.innerHTML = paginatedProducts.map(product => `
        <div class="col-md-2 col-sm-4 col-6 product-item" 
             data-name="${product.name}" 
             data-category="${product.category}">
            
                <article class="product-card">
                    <div class="product-image-wrapper image-container">
                    <a href="/product/${product._id}/${product.variantId}">
                        <img src="/uploads/${product.image[0]}" alt="${product.name}" class="product-image image-0" />
                         <img src="/uploads/${product.image[1]}" alt="${product.name}" class="product-image image-1" />
                        <button class="add-to-cart">Product Details</button>
                        </a>
                         <button class="wishlist-btn" data-product="${product._id}" data-variant="${product.variantId}" 
        data-wishlist="${wishlistProductIds[product.variantId] ? 'true' : 'false'}">
    <i class="bi ${wishlistProductIds[product.variantId] ? 'bi-heart-fill' : 'bi-heart'}" 
       style="color: ${wishlistProductIds[product.variantId] ? 'red' : 'black'}"></i>
</button> 
${product.discountPercentage ? `
                                        <div class="discount-label">
                                            <i class="bi bi-tag"></i> ${product.discountPercentage}% OFF
                                        </div>
                                    ` : ''}


                    </div>
                
                <div class="product-details">
                    <div class="product-info">
                        <h3 class="product-name">   ${product.name}
                        </h3>
                        <div class="product-price-wrapper">
                            <span class="stock-badge">
                                ${product.stock > 0 ? 'IN STOCK' : 'OUT OF STOCK'}
                            </span>
                            <div class="price">
                                ${product.discountedPrice && product.discountedPrice !== product.price ? `
                                    {{!-- <span class="product-price original-price">₹<s>${product.price}</s></span> --}}
                                    <span class="product-price discounted-price">₹${product.discountedPrice}</span>
                                ` : `
                                    <span class="product-price">₹${product.price}</span>
                                `}
                            </div>
                        </div>
                    </div>
                </div>
            </article>
        </div>
    `).join('');
    } 

    updatePagination();
}

function updatePagination() {
    const totalPages = Math.ceil(filteredProducts.length / productsPerPage);
    const pagination = document.getElementById('pagination-controls');
    
    pagination.innerHTML = `
      <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
        <a class="page-link" href="#" data-page="prev">«</a>
      </li>
      ${Array.from({length: totalPages}, (_, i) => `
        <li class="page-item ${i + 1 === currentPage ? 'active' : ''}">
          <a class="page-link" href="#" data-page="${i + 1}">${i + 1}</a>
        </li>
      `).join('')}
      <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
        <a class="page-link" href="#" data-page="next">»</a>
      </li>
    `;
  }
  function handleWishlistClick(event) {
    const button = event.target.closest(".wishlist-btn");
    if (!button) return;

    const icon = button.querySelector("i");
    const productId = button.getAttribute("data-product");
    const variantId = button.getAttribute("data-variant");

    fetch("/wishlist/add-product", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ productId: productId, variantId: variantId }),
    })
    .then(response => response.json())
    .then(result => {
        Swal.fire({
            icon: result.success ? "success" : "error",
            title: result.message,
            confirmButtonText: "OK",
        });
        
        if (result.success) {
        
            if (result.message.includes("Added")) {
                icon.classList.remove("bi-heart");
                icon.classList.add("bi-heart-fill");
                icon.style.color = "red";
            } else {
                icon.classList.remove("bi-heart-fill");
                icon.classList.add("bi-heart");
                icon.style.color = "black";
            }
        }
    })
    .catch(error => {
        console.error("Error updating wishlist:", error);
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "Something went wrong! Please try again.",
            confirmButtonText: "OK",
        });
    });
}
// Add this function to your script
function updateFilterSummary() {
  const summaryDiv = document.querySelector('.filter-summary');
  const searchQuery = document.getElementById('search-input').value;
  const category = document.getElementById('category-filter').value;
  const resultsCount = document.getElementById('results-count');
  const searchSummary = document.getElementById('search-summary');
  const categorySummary = document.getElementById('category-summary');
  const sortSummary = document.getElementById('sort-summary');
  
  // Format the sort labels in a readable format
  const sortLabels = {
    'popularity': 'Popularity',
    'priceLowToHigh': 'Price: Low to High',
    'priceHighToLow': 'Price: High to Low',
    'averageRatings': 'Average Ratings',
    'featured': 'Featured',
    'newArrivals': 'New Arrivals',
    'aToZ': 'A to Z',
    'zToA': 'Z to A'
  };
  
  // Update results count
  resultsCount.textContent = `${filteredProducts.length} result${filteredProducts.length !== 1 ? 's' : ''}`;
  
  // Update search query summary
  if (searchQuery.trim()) {
    searchSummary.textContent = ` for "${searchQuery}"`;
  } else {
    searchSummary.textContent = '';
  }
  
  // Update category summary
  if (category) {
    categorySummary.textContent = ` in ${category}`;
  } else {
    categorySummary.textContent = '';
  }
  
  // Update sort summary
  sortSummary.textContent = `Sorted by: ${sortLabels[currentSort] || 'New Arrivals'}`;
  
  // Show the summary div if any filter is applied
  if (searchQuery.trim() || category || currentSort !== 'newArrivals') {
    summaryDiv.style.display = 'block';
  } else if (filteredProducts.length !== products.length) {
    // Still show the div if product count has changed
    summaryDiv.style.display = 'block';
  } else {
    summaryDiv.style.display = 'none';
  }
}

// Now update your existing renderProducts function to call this at the end
function renderProducts() {
    const container = document.getElementById('products-container');
    const paginatedProducts = filteredProducts.slice(
        (currentPage - 1) * productsPerPage,
        currentPage * productsPerPage
    );
    
    if (paginatedProducts.length === 0) {
        container.innerHTML = `<div class="text-center mt-4">
            <h4>No products found</h4>
        </div>`;
    } else {
        container.innerHTML = paginatedProducts.map(product =>  `
        <div class="col-md-2 col-sm-4 col-6 product-item" 
             data-name="${product.name}" 
             data-category="${product.category}">
            
                <article class="product-card">
                    <div class="product-image-wrapper image-container">
                    <a href="/product/${product._id}/${product.variantId}">
                        <img src="/uploads/${product.image[0]}" alt="${product.name}" class="product-image image-0" />
                         <img src="/uploads/${product.image[1]}" alt="${product.name}" class="product-image image-1" />
                        <button class="add-to-cart">Product Details</button>
                        </a>
                         <button class="wishlist-btn" data-product="${product._id}" data-variant="${product.variantId}" 
        data-wishlist="${wishlistProductIds[product.variantId] ? 'true' : 'false'}">
    <i class="bi ${wishlistProductIds[product.variantId] ? 'bi-heart-fill' : 'bi-heart'}" 
       style="color: ${wishlistProductIds[product.variantId] ? 'red' : 'black'}"></i>
</button> 
${product.discountPercentage ? `
                                        <div class="discount-label">
                                            <i class="bi bi-tag"></i> ${product.discountPercentage}% OFF
                                        </div>
                                    ` : ''}


                    </div>
                
                <div class="product-details">
                    <div class="product-info">
                        <h3 class="product-name">   ${product.name}
                        </h3>
                        <div class="product-price-wrapper">
                            <span class="stock-badge">
                                ${product.stock > 0 ? 'IN STOCK' : 'OUT OF STOCK'}
                            </span>
                            <div class="price">
                                ${product.discountedPrice && product.discountedPrice !== product.price ? `
                                    {{!-- <span class="product-price original-price">₹<s>${product.price}</s></span> --}}
                                    <span class="product-price discounted-price">₹${product.discountedPrice}</span>
                                ` : `
                                    <span class="product-price">₹${product.price}</span>
                                `}
                            </div>
                        </div>
                    </div>
                </div>
            </article>
        </div>
    `).join('');
    } 

    updatePagination();
    updateFilterSummary(); 
}

function applySort(sortType) {
    currentSort = sortType;
    
    
    
    renderProducts();
    
}


function handleSearch() {
    const searchQuery = document.getElementById('search-input').value.toLowerCase();
    const category = document.getElementById('category-filter').value.toUpperCase();
    
    filteredProducts = products.filter(product => {
        const matchesSearch = product.name.toLowerCase().includes(searchQuery);
        const matchesCategory = category === "" || product.category.toUpperCase() === category;
        return matchesSearch && matchesCategory;
    });

    applySort(currentSort);
    currentPage = 1;
    renderProducts();
   
}


  function handleSearch() {
    const searchQuery = document.getElementById('search-input').value.toLowerCase();
    const category = document.getElementById('category-filter').value.toUpperCase();
    
       filteredProducts = products.filter(product => {
        const matchesSearch = product.name.toLowerCase().includes(searchQuery);
        const matchesCategory = category === "" || product.category.toUpperCase() === category;
        return matchesSearch && matchesCategory;
    });

    applySort(currentSort);
    currentPage = 1;
    renderProducts();
  }

  function applySort(sortType) {
    currentSort = sortType;
    
    switch(sortType) {
      case 'popularity':
        filteredProducts.sort((a, b) => b.popularity - a.popularity);
        break;
      case 'priceLowToHigh':
        filteredProducts.sort((a, b) => a.price - b.price);
        break;
      case 'priceHighToLow':
        filteredProducts.sort((a, b) => b.price - a.price);
        break;
      case 'averageRatings':
        filteredProducts.sort((a, b) => b.averageRating - a.averageRating);
        break;
      case 'featured':
        filteredProducts.sort((a, b) => b.featured - a.featured);
        break;
      case 'newArrivals':
        filteredProducts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
        break;
      case 'aToZ':
        filteredProducts.sort((a, b) => a.name.localeCompare(b.name));
        break;
      case 'zToA':
        filteredProducts.sort((a, b) => b.name.localeCompare(a.name));
        break;
    }
    
    renderProducts();
  }

  function setupEventListeners() {
    
    document.getElementById('search-input').addEventListener('input', debounce(handleSearch, 300));
    document.getElementById('category-filter').addEventListener('change', handleSearch);

    document.getElementById('search-button').addEventListener('click', handleSearch);
  document.getElementById('products-container').addEventListener('click', handleWishlistClick);
   
    document.querySelectorAll('.dropdown-item').forEach(item => {
      item.addEventListener('click', (e) => {
        e.preventDefault();
        const sortType = e.target.getAttribute('href').split('=')[1];
        applySort(sortType);
      });
    });

   
     document.getElementById('pagination-controls').addEventListener('click', (e) => {
      e.preventDefault();
      if (e.target.tagName === 'A') {
        const page = e.target.dataset.page;
        if (page === 'prev' && currentPage > 1) currentPage--;
        else if (page === 'next' && currentPage < Math.ceil(filteredProducts.length / productsPerPage)) currentPage++;
        else if (!isNaN(page)) currentPage = parseInt(page);
        renderProducts();
      }
    });

    
    document.getElementById('products-container').addEventListener('click', async (e) => {
      if (e.target.closest('.wishlist-btn')) {
        const btn = e.target.closest('.wishlist-btn');
       
      }
    });
  }

  function debounce(func, timeout = 300) {
    let timer;
    return (...args) => {
      clearTimeout(timer);
      timer = setTimeout(() => { func.apply(this, args); }, timeout);
    };
  }
});
renderProducts();
  setupEventListeners();
</script>
