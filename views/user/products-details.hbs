<link rel="stylesheet" href="/proddet.css">

<title>{{title}}</title>
{{>header}}

<section>
    <div class="container py-5">
        <div class="row g-4">
            <!-- Image Column -->
            <div class="col-md-6">

                <div class="container">
                    <div class="row">
                        <nav class="breadcrumb" aria-label="Breadcrumb">
                            <a href="/"><span class="breadcrumb-text">Home</span></a>
                            <img src="https://cdn.builder.io/api/v1/image/assets/TEMP/347fc193d0088dca0695d99147b3700ee95d8efb9ecfa3c2f8ce353113eebee3?placeholderIfAbsent=true&apiKey=d7cebeeadab64378ab4fc611373387df"
                                alt="" />
                            <span class="breadcrumb-text breadcrumb-active">{{updatedProduct.name}}</span>
                        </nav>
                        <!-- Thumbnails (Left) -->
                        <div class="col-2">
                            <div class="d-flex flex-column">
                                {{#each products.image}}
                                <a href="#carouselExample" role="button" data-bs-slide-to="{{@index}}"
                                    class="thumbnail mb-3">
                                    <img src="/uploads/{{this}}" alt="Thumbnail {{@index}}" class="img-fluid">
                                </a>
                                {{/each}}
                            </div>
                        </div>

                        <!-- Main Product Image (Right) -->
                        <div class="col-10">
                            <div id="carouselExample" class="carousel slide">
                                <div class="carousel-inner">
                                    {{#each products.image}}
                                    <div class="carousel-item {{#if @first}}active{{/if}}">
                                        <img src="/uploads/{{this}}" class="d-block w-100 zoom-image"
                                            alt="Main Product {{@index}}">
                                    </div>
                                    {{/each}}
                                </div>
                            </div>

                            <!-- Zoom Lens -->
                            <div id="lens" class="lens"></div>
                            <!-- Zoomed Result -->
                            <div id="result" class="result"></div>
                        </div>

                    </div>
                </div>

            </div>

            <!-- Details Column -->
            <div class="col-md-6">
                <div>
                    <div class="d-flex justify-content-between align-items-center">
                        <h1 class="h4 mb-3 me-auto p-2">{{updatedProduct.name}}</h1>
<div class="button-container">
                        <button class="wishlist-btn" style="opacity:1;
                        background-color: transparent;
        border: none;
        cursor: pointer;
        font-size: 20px;
        color: black;
        " data-product="{{updatedProduct._id}}" data-variant="" >
                            
                            <i class="bi bi-heart"></i>
                            
                        </button>


                        <button id="shareBtn"><i class="bi bi-share"></i></button>
                        </div>
                    </div>

                    <div class="d-flex align-items-center mb-3">
                        <div class="rating-badge d-flex align-items-center me-3">
                            <i class="bi bi-star-fill text-secondary pe-2"></i>
                            <span>{{averageRating}} — {{reviews.length}} Reviews</span>
                        </div>

                        {{#if updatedProduct.productDiscount}}
                        <span class="discount-badge">{{updatedProduct.productDiscount}}% Off</span>
                        {{else}}
                        <span class="discount-badge">No Discount</span>
                        {{/if}}



                        <div id="stock-status" class="rat1 d-flex align-items-center me-3" style="margin-left: 20px;">
                            <!-- Stock status if needed -->
                        </div>
                    </div>

                    <div class="mb-3">
                        {{#if productDiscount}}
                     
                          <h2 class="h5" id="price-display" >MRP: <s>₹{{updatedProduct.variants.[0].price}}</s></h2>
        <h2 id="discounted-price">MRP :₹{{updatedProduct.variants.[0].discountedPrice}}</h2>
                        {{else}}
                        
                          <h2 id="price-display">MRP : ₹{{updatedProduct.variants.[0].price}}</h2>
                        <h2 id="discounted-price"></h2>
                        {{/if}}
                    </div>

                    <div class="my-3">
                        <label class="form-label">SELECT VARIANT</label>
                        <div class="d-flex gap-2">
                            {{#each products.variants}}
                            <button type="button" class="btn btn-outline-dark variant-btn" data-price="{{price}}"
                                data-discounted-price="{{discountedPrice}}" data-variant="{{_id}}"
                                data-stock="{{quantity}}" data-product="{{../updatedProduct._id}}" data-size="{{size}}">
                                {{size}}
                            </button>
                            {{/each}}
                        </div>
                    </div>

                    <div class="d-flex flex-column">
                        <label for="quantity-input" class="my-2">QUANTITY</label>
                        <div class="d-flex justify-content-between border rounded border-dark w-25">
                            <button class="btn px-3 border-0" id="decrement" aria-label="Decrease quantity">-</button>
                            <span id="quantity" class="mx-3 align-self-center">1</span>
                            <button class="btn px-3 border-0" id="increment" aria-label="Increase quantity">+</button>
                        </div>
                    </div>

                    <div class="mt-4">
                        <button class="button add-to-cart1 px-40" id="add-to-cart1"
                            data-product-id="{{updatedProduct._id}}" data-variant-id="">
                            Add To Cart
                        </button>
                    </div>

                    <div class="mt-3 text-muted">
                        <small>Free shipping on orders over $50</small>
                    </div>
                </div>
            </div>



        </div>
    </div>
</section>

<section class="p-5">
    <div class="row p-4">
        <div class="col-12">
            <!-- Buttons -->
            <div class="d-flex justify-content-center gap-2" id="list-tab" role="tablist">
                <button class="btn btn-black active" id="list-home-list" data-bs-toggle="list"
                    data-bs-target="#list-home" type="button" role="tab" aria-controls="list-home">
                    <i class="bi bi-three-dots pe-2"></i>Details
                </button>
                <button class="btn btn-black" id="list-profile-list" data-bs-toggle="list"
                    data-bs-target="#list-profile" type="button" role="tab" aria-controls="list-profile">
                    <i class="bi bi-star pe-2"></i>Reviews
                </button>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="container px-5 col-12">
            <!-- Tab contents -->
            <div class="tab-content" id="nav-tabContent">
                <!-- Details Tab -->
                <div class="tab-pane fade show active" id="list-home" role="tabpanel" aria-labelledby="list-home-list">
                    <h5>Details</h5>
                    <p>{{updatedProduct.description}}</p> <!-- Display dynamic product description -->
                </div>

                <!-- Reviews Tab -->
                <div class="tab-pane fade" id="list-profile" role="tabpanel" aria-labelledby="list-profile-list">
                    <div class="container">
                        <div class="d-flex justify-content-between align-items-center">
                            <h4>Reviews</h4>
                            <div class="text-muted">
                                {{averageRating}} ★ — {{reviews.length}} Reviews
                            </div>
                        </div>

                        <!-- Check if the user is eligible to review -->
                        {{#if updatedProduct.hasPurchased}}
                        <form id="reviewForm" data-product-id="{{updatedProduct._id}}" class="mt-3">


                            <label class="mt-3">Rating:</label>
                            <div class="star-rating">
                                {{!-- Star icons for rating selection --}}
                                <span class="star" data-value="5">★</span>
                                <span class="star" data-value="4">★</span>
                                <span class="star" data-value="3">★</span>
                                <span class="star" data-value="2">★</span>
                                <span class="star" data-value="1">★</span>
                                <input type="hidden" id="rating" name="rating" required>
                            </div>

                            <label for="reviewText" class="mt-3">Write a Review:</label>
                            <textarea id="reviewText" class="form-control" rows="3"
                                placeholder="Share your experience..." required></textarea>

                            <button type="submit" class="btn btn-primary mt-3">Submit Review</button>
                        </form>
                        {{else}}
                        <div class="alert alert-warning mt-3">
                            You can review this product only after it has been delivered.
                        </div>
                        {{/if}}



                        <div class="mt-4">
    <h5 class="mb-3">Customer Reviews</h5>

    {{#if reviews.length}}
    <div id="reviews-container" class="list-group">
        {{#each reviews}}
        <div class="list-group-item border-0 shadow-sm p-3 mb-3 rounded review-item">
            <div class="d-flex align-items-start">
                <div class="me-3">
                    <img src="{{this.userAvatar}}" alt="User Avatar" class="rounded-circle border" width="40" height="40">
                </div>
                <div class="w-100">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="mb-1 fw-semibold">{{this.userName}}</h6>
                        <small class="text-muted ms-auto">{{formatDate this.createdAt}}</small>
                    </div>
                    <div class="text-warning mb-1">
                        {{{generateStars this.rating}}}
                    </div>
                    <p class="mt-2 mb-0 text-secondary">{{this.comment}}</p>

                    <!-- Reply Button -->
                    <button class="btn btn-sm btn-outline-primary mt-2 reply-toggle" data-review-id="{{this._id}}">
                        Reply
                    </button>

                    <!-- Reply Form -->
                    <form class="reply-form mt-2 d-none" data-review-id="{{this._id}}">
                        <textarea class="form-control reply-text" rows="2" placeholder="Write a reply..."></textarea>
                        <button type="submit" class="btn btn-sm btn-primary mt-2">Submit Reply</button>
                    </form>

                    <!-- Display Replies (Initially Show 2 Replies) -->
                    {{#if this.visibleReplies.length}}
                    <div class="mt-3 reply-container">
                        <h6 class="text-muted">Replies:</h6>
                        {{#each this.visibleReplies}}
                        <div class="ms-3 p-2 border-start reply-item">
                            <div class="me-3">
                    <img src="{{this.userAvatar}}" alt="User Avatar" class="rounded-circle border" width="40" height="40">
                </div>
                            <strong>{{this.userName}}</strong>
                            <small class="text-muted ms-2">{{formatDate this.createdAt}}</small>
                            <p class="mt-1">{{this.comment}}</p>
                        </div>
                        {{/each}}
                    </div>
                    {{/if}}

                    <!-- "Show More Replies" Button -->
                    {{#if this.hasMoreReplies}}
                    <button class="btn btn-sm btn-link show-more-replies" data-review-id="{{this._id}}">Show More Replies</button>
                    {{/if}}
                </div>
            </div>
        </div>
        {{/each}}
    </div>

    <!-- "Load More Reviews" Button -->
    {{#if hasMoreReviews}}
    <div class="text-center mt-4">
        <button id="load-more-reviews" class="btn btn-outline-primary px-4 py-2">Load More Reviews</button>
    </div>
    {{/if}}

    {{else}}
    <p class="text-muted text-center mt-4">No reviews yet. Be the first to review this product!</p>
    {{/if}}
</div>





                    </div>
                </div>

            </div>
        </div>
    </div>
</section>





<div style="padding-top:5%; padding-left:2%">
    <h3>Similar Products</h3>
</div>
<section class="best-sellers-section" style="margin-top:0" aria-label="Best Selling Products">
    <div class="prods">
        <div class="row products-grid">
            {{#each similarProducts}}
            <div class="col-md-2 col-sm-4 col-6">
                
                    <article class="product-card">
                        <div class="product-image-wrapper image-container">
                            <a href="/product/{{this._id}}/{{this.variants.[0]._id}}">
                            <img loading="lazy" src="/uploads/{{this.image.[0]}}" alt="{{name}}" class="product-image image-0" />
                             <img loading="lazy" src="/uploads/{{this.image.[1]}}" alt="{{name}}" class="product-image image-1" />
                            <button class="add-to-cart">Product Details</button> </a>
                            <button class="wishlist-btn" data-product="{{this._id}}"
                                data-variant="{{this.variants.[0]._id}}">
                                {{#if (lookup ../wishlistProductIds this.variants.[0]._id)}}
                                <i class="bi bi-heart-fill" style="color: red;"></i>
                                {{else}}
                                <i class="bi bi-heart" style="color: black;"></i>
                                {{/if}}
                            </button>
                             {{#if this.variants.[0].discountPercentage}}
                <div class="discount-label">
                 <i class="bi bi-tag"></i> {{this.variants.[0].discountPercentage}}% OFF
                </div>
              {{/if}}
                        </div>
               
                <div class="product-details">
                    <div class="product-info">
                        <h3 class="product-name">
                            {{this.name}}</h3>
                        <div class="product-price-wrapper">
                            <span class="stock-badge" style="border-color:black;">
                                {{#if this.variants.[0].stockStatus}}
                                {{this.variants.[0].stockStatus}}
                                {{else}}
                                IN STOCK
                                {{/if}}
                            </span>
                            <div class="price">
                                 {{#if this.selectedVariant.discountedPrice}} 
            {{!-- <span class="original-price"><s> ₹{{this.selectedVariant.price}}</s></span> --}}
            <span class="discounted-price"> ₹{{this.selectedVariant.discountedPrice}}</span>
          {{else}}
            <span class="price"> ₹{{this.selectedVariant.price}}</span>
          {{/if}}
                            </div>
                        </div>
                    </div>
                </div>
                </article>

            </div>
            {{/each}}
        </div>
    </div>
</section>


{{>footer}}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>

    const imageContainer = document.querySelector('.carousel-inner');
    const mainImages = document.querySelectorAll('.zoom-image');
    const lens = document.getElementById('lens');
    const result = document.getElementById('result');
    const resultImg = document.getElementById('result-img');
   function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toISOString().split('T')[0]; 
}

    
    mainImages.forEach((image) => {
        image.addEventListener('mousemove', (e) => {
            const rect = image.getBoundingClientRect();

          
            const x = e.clientX - rect.left - lens.offsetWidth / 2;
            const y = e.clientY - rect.top - lens.offsetHeight / 2;

            
            lens.style.left = `${x}px`;
            lens.style.top = `${y}px`;

            
            lens.style.display = 'block';

            
            const xPercent = (x / image.width) * 100;
            const yPercent = (y / image.height) * 100;

            
            result.style.backgroundImage = `url(${image.src})`;
            result.style.backgroundPosition = `${xPercent}% ${yPercent}%`;
            result.style.display = 'block'; 
        });

        image.addEventListener('mouseleave', () => {
            lens.style.display = 'none';
            result.style.display = 'none'; 
        });
    });

   
    document.addEventListener('DOMContentLoaded', () => {
          let currentReviewIndex = 3; 
    const reviewsContainer = document.getElementById("reviews-container");
    const loadMoreReviewsBtn = document.getElementById("load-more-reviews");


    if (loadMoreReviewsBtn) {
        loadMoreReviewsBtn.addEventListener("click", async function () {
            try {
                const response = await fetch(`/reviews?offset=${currentReviewIndex}&limit=3`);
                const data = await response.json();

                if (data.reviews.length > 0) {
                    data.reviews.forEach(review => {
                        const reviewHtml = `
                            <div class="list-group-item border-0 shadow-sm p-3 mb-3 rounded review-item">
                                <div class="d-flex align-items-start">
                                    <div class="me-3">
                                        <img src="${review.userAvatar}" class="rounded-circle border" width="40" height="40">
                                    </div>
                                    <div class="w-100">
                                        <h6 class="mb-1 fw-semibold">${review.userName}</h6>
                                        <small class="text-muted">${formatDate(review.createdAt)}</small>
                                    
                                        <p class="mt-2 mb-0 text-secondary">${review.comment}</p>
                                         <button class="btn btn-sm btn-outline-primary mt-2 reply-toggle" data-review-id="${this._id}">
                        Reply
                    </button>
                    <form class="reply-form mt-2 d-none" data-review-id="${this._id}">
                        <textarea class="form-control reply-text" rows="2" placeholder="Write a reply..."></textarea>
                        <button type="submit" class="btn btn-sm btn-primary mt-2">Submit Reply</button>
                    </form>
                                    </div>
                                </div>
                            </div>
                        `;
                        reviewsContainer.insertAdjacentHTML("beforeend", reviewHtml);
                    });

                    currentReviewIndex += data.reviews.length;
                }
  document.querySelectorAll('.reply-toggle').forEach(button => {
        button.addEventListener('click', function () {
            const reviewId = this.getAttribute('data-review-id');
            document.querySelector(`form[data-review-id="${reviewId}"]`).classList.toggle('d-none');
        });
    });

                if (!data.hasMoreReviews) {
                    loadMoreReviewsBtn.style.display = "none";
                }
            } catch (error) {
                console.error("Error loading reviews:", error);
            }
        });
    }

   function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toISOString().split('T')[0]; 
}

 document.querySelectorAll('.show-more-replies').forEach(button => {
    button.addEventListener('click', async function () {
        const reviewId = this.getAttribute("data-review-id");
        const replyContainer = this.previousElementSibling;

        try {
            const response = await fetch(`/replies/${reviewId}?offset=2&limit=5`);
            const data = await response.json();

            if (data.replies.length > 0) {
                data.replies.forEach(reply => {
                    const replyHtml = `
                        <div class="d-flex align-items-start ms-3 p-2 border-start">
                            <img src="${reply.userAvatar}" class="rounded-circle border me-2" width="35" height="35" alt="User Avatar">
                            <div>
                                <strong>${reply.userName}</strong>
                                <small class="text-muted">${formatDate(reply.createdAt)}</small>
                                <p class="mt-1">${reply.comment}</p>
                            </div>
                        </div>
                    `;
                    replyContainer.insertAdjacentHTML("beforeend", replyHtml);
                });
            }

            if (!data.hasMoreReplies) {
                this.style.display = "none"; 
            }
        } catch (error) {
            console.error("Error loading replies:", error);
        }
    });
});

        
         document.querySelectorAll('.reply-toggle').forEach(button => {
        button.addEventListener('click', function () {
            const reviewId = this.getAttribute('data-review-id');
            document.querySelector(`form[data-review-id="${reviewId}"]`).classList.toggle('d-none');
        });
    });

    
    document.querySelectorAll('.reply-form').forEach(form => {
        form.addEventListener('submit', async function (event) {
            event.preventDefault();
            const reviewId = this.getAttribute('data-review-id');
            const replyText = this.querySelector('.reply-text').value.trim();

           if (!replyText) {
        
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Reply cannot be empty',
            });
            return;
        }

            try {
                const response = await fetch(`/reviews/${reviewId}/reply`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ comment: replyText })
                });

                if (response.ok) {
                    location.reload(); 
                } else {
                    alert('Failed to add reply');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Something went wrong');
            }
        });
    });
        
        
        const stars = document.querySelectorAll(".star");
        const ratingInput = document.getElementById("rating");

        stars.forEach(star => {
            star.addEventListener("click", function () {
                const value = this.getAttribute("data-value");
                ratingInput.value = value; 

               
                stars.forEach(s => s.classList.remove("selected"));
                this.classList.add("selected");

      
                let previousSibling = this.previousElementSibling;
                while (previousSibling) {
                    previousSibling.classList.add("selected");
                    previousSibling = previousSibling.previousElementSibling;
                }
            });
        });

        
        $("#reviewForm").submit(function (event) {
            event.preventDefault();

            let productId = $(this).attr("data-product-id").trim();
            if (!productId) {
                Swal.fire("Error!", "Product ID is missing!", "error");
                return;
            }

            let rating = $("#rating").val();
            let comment = $("#reviewText").val();

            if (!rating) {
                Swal.fire("Warning!", "Please select a rating before submitting your review.", "warning");
                return;
            }

            $.ajax({
                url: "/submit-review",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify({
                    productId: productId,
                    rating: rating,
                    comment: comment
                }),
                success: function (response) {
                    Swal.fire({
                        title: "Success!",
                        text: response.message,
                        icon: "success",
                        confirmButtonText: "OK"
                    }).then(() => {
                        location.reload();
                    });
                },
                error: function (xhr) {
                    Swal.fire("Error!", xhr.responseJSON.message, "error");
                }
            });

            return false;
        });

        const incrementButton = document.getElementById('increment');
        const decrementButton = document.getElementById('decrement');
        const quantityDisplay = document.getElementById('quantity');
        const addToCartButton = document.getElementById('add-to-cart1');

        let currentStock = 0;
        let variantSelected = false;

        function updateStockStatus(stock) {
            const stockStatus = document.getElementById('stock-status');
            if (stock === 0) {
                stockStatus.innerHTML = '<span class="text-danger">Out of Stock</span>';
                disableAddToCart();
            } else if (stock < 10) {
                stockStatus.innerHTML = `<span class="text-warning">Few stocks left</span>`;
                enableAddToCart();
            } else {
                stockStatus.innerHTML = '<span class="text-success">In Stock</span>';
                enableAddToCart();
            }
        }

        function enableAddToCart() {
            addToCartButton.disabled = !(variantSelected && currentStock > 0);
            addToCartButton.style.opacity = addToCartButton.disabled ? '0.5' : '1';
            addToCartButton.style.cursor = addToCartButton.disabled ? 'not-allowed' : 'pointer';
        }

        function disableAddToCart() {
            addToCartButton.disabled = true;
            addToCartButton.style.opacity = '0.5';
            addToCartButton.style.cursor = 'not-allowed';
        }

        
        const pathSegments = window.location.pathname.split("/");
        const selectedVariantId = pathSegments[pathSegments.length - 1]; 

        const variantButtons = document.querySelectorAll('.variant-btn');
 const wishlistProductIds = {{{ wishListIds}}}

        variantButtons.forEach(button => {
            button.addEventListener('click', function () {
                
                variantButtons.forEach(btn => btn.classList.remove('btn-dark', 'active'));

                
                button.classList.add('btn-dark', 'active');

                
                const price = parseFloat(button.getAttribute('data-price')).toFixed(2);
                const discountedPrice = parseFloat(button.getAttribute('data-discounted-price')).toFixed(2);

                if (!isNaN(discountedPrice)) {
                    document.getElementById('price-display').innerHTML = `<s>MRP : ₹${price}</s>`;
                    document.getElementById('discounted-price').innerText = `MRP: ₹${discountedPrice}`;
                } else {
                    document.getElementById('price-display').innerHTML = `MRP : ₹${price}`;
                }

               
                currentStock = parseInt(button.getAttribute('data-stock'));
                updateStockStatus(currentStock);
                quantityDisplay.textContent = '1';
                variantSelected = true;
                enableAddToCart();

                
                const variantId = button.getAttribute('data-variant');
                const productId = button.getAttribute('data-product');
                const variantSize = button.getAttribute('data-size');

                const wishlistButton = document.querySelector('.wishlist-btn');
                if (wishlistButton) {
                    wishlistButton.setAttribute('data-variant', variantId);
                    wishlistButton.setAttribute('data-product', productId);
                    wishlistButton.setAttribute('data-size', variantSize);
                }
                   if (wishlistProductIds[variantId]) {
        wishlistButton.innerHTML = '<i class="bi bi-heart-fill" style="color: red;"></i>';
    } else {
        wishlistButton.innerHTML = '<i class="bi bi-heart"></i>';
    }

                addToCartButton.setAttribute('data-variant-id', variantId);
                addToCartButton.setAttribute('data-size', variantSize);
                addToCartButton.setAttribute('data-product-id', productId);
            });


            if (button.getAttribute("data-variant") === selectedVariantId) {
                button.click();
            }
        });
        incrementButton.addEventListener('click', () => {
            let quantity = parseInt(quantityDisplay.textContent);
            const maxAllowed = Math.min(5, currentStock);
            if (quantity < maxAllowed) {
                quantity++;
                quantityDisplay.textContent = quantity.toString();
            } else {
                Swal.fire('Warning', `Maximum stock limit reached. Only ${maxAllowed} items available.`, 'warning');
            }
            enableAddToCart();
        });

        decrementButton.addEventListener('click', () => {
            let quantity = parseInt(quantityDisplay.textContent);
            if (quantity > 1) {
                quantity--;
                quantityDisplay.textContent = quantity.toString();
            }
            enableAddToCart();
        });

        enableAddToCart();
    });

    document.querySelectorAll('.wishlist-btn').forEach(button => {
        button.addEventListener('click', async function () {
            const productId = this.getAttribute('data-product');
            const variantId = this.getAttribute('data-variant');
           
            if (variantId === null) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: "Please select a variant",
                    confirmButtonText: 'OK'
                });
                return;
            }

            const icon = this.querySelector('i');

            const response = await fetch('/wishlist/add-product', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ productId: productId, variantId: variantId })
            });

            const result = await response.json();
            if (result.success) {
                Swal.fire({
                    icon: 'success',
                    title: result.message,
                    confirmButtonText: 'OK'
                });


                icon.classList.toggle('bi-heart-fill');
                icon.classList.toggle('bi-heart');
                icon.style.color = result.message.includes('Added') ? 'red' : '';
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: result.message,
                    confirmButtonText: 'OK'
                });
            }
        });
    });

    document.getElementById('add-to-cart1').addEventListener('click', function () {
        const productId = this.getAttribute('data-product-id');
        const variantId = this.getAttribute('data-variant-id');
        let quantity = parseInt(document.getElementById('quantity').innerText);
        const variantSize = this.getAttribute('data-size');


        if (!variantId) {
            Swal.fire({
                icon: 'warning',
                title: 'No Variant Selected',
                text: 'Please select a product variant before adding to the cart.',
            });
            return;
        }

        const stockAvailable = parseInt(document.querySelector('.variant-btn.active')?.getAttribute('data-stock')) || 0;
        const maxAllowed = Math.min(5, stockAvailable);

        if (quantity > maxAllowed) {
            Swal.fire({
                icon: 'warning',
                title: 'Quantity Limit Exceeded',
                text: `Only ${maxAllowed} items are allowed.`,
            });
            quantity = maxAllowed;
        }

        const priceText = document.getElementById('price-display').innerText;
        const discountedPriceText = document.getElementById('discounted-price').innerText;


        const price = parseFloat(priceText.replace(/[^0-9.]/g, '').trim()) || 0;
        const discountedPrice = parseFloat(discountedPriceText.replace(/[^0-9.]/g, '').trim()) || 0;

        fetch('/addtocart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                productId: productId,
                variantId: variantId,
                quantity: quantity,
                price: price,
                discountedPrice: discountedPrice,
                variantSize: variantSize
            }),
        })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.error,
                    });
                } else {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Product added to cart!',
                    });
                }
            })
            .catch(err => {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Something went wrong while adding the product to the cart.',
                });
                console.error(err);
            });
    });
</script>

<script>
    document.getElementById("shareBtn").addEventListener("click", function () {
        const productUrl = window.location.href;

        Swal.fire({
            title: "Share Product",
            html: `
                    <input type="text" id="productLink" class="swal2-input" value="${productUrl}" readonly>
                    <button id="copyBtn" class="swal2-confirm swal2-styled" style="background-color:#007bff; color:#fff;">Copy</button>
                `,
            showCancelButton: true,
            cancelButtonText: "Close",
            showConfirmButton: false,
            didOpen: () => {
               
                document.getElementById("copyBtn").addEventListener("click", function () {
                    const linkInput = document.getElementById("productLink");
                    navigator.clipboard.writeText(linkInput.value).then(() => {
                        Swal.fire("Copied!", "Product link copied to clipboard.", "success");
                    }).catch(err => console.error("Error copying link:", err));
                });
            }
        });
    });
</script>